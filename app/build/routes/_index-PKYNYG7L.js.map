{
  "version": 3,
  "sources": ["../../routes/_index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_index.tsx\");\n  import.meta.hot.lastModified = \"1702558366719.3445\";\n}\n// REMIX HMR END\n\n// routes/index.tsx\n\nimport { useLoaderData, Form } from \"@remix-run/react\";\nimport { useState } from 'react';\nimport { createPlayer, getPlayers } from \"../services/playerService\";\nimport { recordMatch, updateELO, findPlayerByName, calculateNewELOs, logELO } from '../services/playerService';\nexport const meta = () => {\n  return [{\n    title: \"Very cool app | Remix\"\n  }, {\n    property: \"og:title\",\n    content: \"Very cool app\"\n  }, {\n    name: \"description\",\n    content: \"This app is the best\"\n  }];\n};\nexport const loader = async () => {\n  const players = await getPlayers();\n  return {\n    players\n  };\n};\nexport const action = async ({\n  request\n}) => {\n  const formData = await request.formData();\n  const player1Name = formData.get('player1');\n  const player2Name = formData.get('player2');\n  const winner = formData.get('winner'); // Assuming you have a field to indicate the winner\n\n  if (typeof player1Name === 'string' && typeof player2Name === 'string' && typeof winner === 'string') {\n    const player1 = (await findPlayerByName(player1Name)) || (await createPlayer(player1Name));\n    const player2 = (await findPlayerByName(player2Name)) || (await createPlayer(player2Name));\n    const player1IsWinner = player1Name.trim().toLowerCase() === winner.trim().toLowerCase();\n    const {\n      newELOPlayer1,\n      newELOPlayer2\n    } = calculateNewELOs(player1.currentELO, player2.currentELO, player1IsWinner);\n    const winnerId = player1IsWinner ? player1.id : player2.id;\n    const loserId = player1IsWinner ? player2.id : player1.id;\n    await recordMatch(winnerId, loserId, newELOPlayer1, newELOPlayer2);\n    await updateELO(player1.id, newELOPlayer1);\n    await logELO(player1.id, newELOPlayer1); // Log the new ELO for player 1\n    await updateELO(player2.id, newELOPlayer2);\n    await logELO(player2.id, newELOPlayer2); // Log the new ELO for player 2\n  }\n  return null;\n};\nexport default function Index() {\n  _s();\n  const {\n    players\n  } = useLoaderData();\n  const [player1, setPlayer1] = useState(\"\");\n  const [player2, setPlayer2] = useState(\"\");\n  const [winner, setWinner] = useState(\"\");\n  const toggleDarkMode = () => {\n    if (localStorage.theme === 'dark' || !('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      document.documentElement.classList.add('dark');\n      localStorage.theme = 'light';\n    } else {\n      document.documentElement.classList.remove('dark');\n      localStorage.theme = 'dark';\n    }\n  };\n  return <div className={`container dark:bg-gray-800 dark:text-white mx-auto p-4 max-w-2xl`}>\n      <button onClick={toggleDarkMode} className=\"mb-4 p-2 bg-gray-200 dark:bg-gray-700 rounded\">\n        Toggle Dark Mode\n      </button>\n      <h1 className=\"text-3xl font-bold text-center mb-6 dark:text-white\">Krokinole ELO List</h1>\n      <div className=\"flex-col justify-center\">\n        <details className=\"mb-4\">\n          <summary className=\"dark:text-white\">How to Use</summary>\n          <div className=\"dark:text-gray-400\">\n            <h2 className=\"text-xl font-semibold mb-3 dark:text-white\">How to use:</h2>\n            <p className=\"mb-3\">\n              Enter the names of the players and select the winner. The ELOs will be updated automatically.\n            </p>\n            <p className=\"mb-3\">\n              If a player is not in the list, enter their name and submit the form. They will be added to the list and their ELO will be set to 1000.\n            </p>\n            <p className=\"mb-3\">\n              If you want to see the ELO history for a player, click on their name in the table below.\n            </p>\n          </div>\n        </details>\n\n        <div className=\"flex justify-center mb-6\">\n          <img src=\"https://i.ibb.co/kB8pCL3/DALL-E-2023-12-14-13-12-01-Create-a-logo-for-a-Crokinole-match-recording-application-with-a-1960s-vi.png\" alt=\"man-pushing-krokinole-stone-uphill\" className=\"w-1/2\" />\n        </div>\n        <Form method=\"post\" className=\"mb-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n            <input type=\"text\" name=\"player1\" value={player1} onChange={e => setPlayer1(e.target.value)} className=\"border border-gray-300 rounded px-3 py-2 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-600 dark:text-white\" placeholder=\"Player 1\" />\n            <input type=\"text\" name=\"player2\" value={player2} onChange={e => setPlayer2(e.target.value)} className=\"border border-gray-300 rounded px-3 py-2 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-600 dark:text-white\" placeholder=\"Player 2\" />\n          </div>\n          <select name=\"winner\" value={winner} onChange={e => setWinner(e.target.value)} className=\"border border-gray-300 rounded px-3 py-2 mb-4 w-full md:w-auto focus:border-blue-500 focus:ring-1 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-600 dark:text-white\">\n            <option value=\"\">Select the Winner</option>\n            <option value={player1}>{player1}</option>\n            <option value={player2}>{player2}</option>\n          </select>\n          <button type=\"submit\" className=\"m-4 bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 focus:outline-none text-white px-4 py-2 rounded\">\n            Submit Result\n          </button>\n        </Form>\n        <h2 className=\"text-2xl font-semibold mb-3 dark:text-white\">Players:</h2>\n        <table className=\"min-w-full table-auto\">\n          <thead>\n            <tr>\n              <th className=\"px-4 py-2 dark:text-white\">Name</th>\n              <th className=\"px-4 py-2 dark:text-white\">Wins</th>\n              <th className=\"px-4 py-2 dark:text-white\">ELO</th>\n            </tr>\n          </thead>\n          <tbody>\n            {players.sort((a, b) => b.currentELO - a.currentELO).map(player => <tr key={player.id} className=\"border-t dark:border-gray-700 text-xl\">\n                <td className=\"px-4 py-2 font-semibold dark:text-white\">{player.name}</td>\n                <td className=\"px-4 py-2 align-middle text-center dark:text-white\">{player.matchesAsWinner.length}</td>\n                <td className=\"px-4 py-2 align-middle text-center dark:text-white\">{player.currentELO}</td>\n              </tr>)}\n          </tbody>\n        </table>\n      </div>\n    </div>;\n}\n_s(Index, \"EjE4fJwL7NSCFwj0CUmIV1TPEEs=\", false, function () {\n  return [useLoaderData];\n});\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react"]
}
