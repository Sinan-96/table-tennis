datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Player {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  currentELO       Int                @default(1500) // Starting ELO rating
  currentTeamELO   Int                @default(1500) // Starting ELO rating
  matchesAsWinner  Match[]            @relation("MatchWinner")
  matchesAsLoser   Match[]            @relation("MatchLoser")
  eloLogs          ELOLog[]
  Match            Match[]
  Team             Team?              @relation(fields: [teamId], references: [id])
  teamId           Int? // Added teamId to reflect ALTER TABLE migration
  teams            Team[]             @relation("TeamMembers")
  TeamPlayerELOLog TeamPlayerELOLog[]
}

model Match {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  winnerId  Int
  loserId   Int
  winnerELO Int // ELO of winner at time of match
  loserELO  Int // ELO of loser at time of match
  winner    Player   @relation("MatchWinner", fields: [winnerId], references: [id])
  loser     Player   @relation("MatchLoser", fields: [loserId], references: [id])
  Player    Player?  @relation(fields: [playerId], references: [id])
  playerId  Int?
  matchType String? // Added matchType to reflect ALTER TABLE migration

  @@index([winnerId, loserId])
}

model ELOLog {
  id       Int      @id @default(autoincrement())
  playerId Int
  elo      Int // ELO rating at this log entry
  date     DateTime @default(now())
  player   Player   @relation(fields: [playerId], references: [id])

  @@index([playerId])
}

model TeamPlayerELOLog {
  id       Int      @id @default(autoincrement())
  playerId Int
  elo      Int // ELO rating at this log entry for team player
  date     DateTime @default(now())
  Player   Player   @relation(fields: [playerId], references: [id])

  @@index([playerId])
}

model TeamELOLog {
  id     Int      @id @default(autoincrement())
  teamId Int
  elo    Int // ELO rating at this log entry for team
  date   DateTime @default(now())
  team   Team     @relation(fields: [teamId], references: [id])

  @@index([teamId])
}

model Team {
  id                  Int          @id @default(autoincrement())
  players             Player[]     @relation("TeamMembers")
  teamMatchesAsWinner TeamMatch[]  @relation("TeamMatchWinner")
  teamMatchesAsLoser  TeamMatch[]  @relation("TeamMatchLoser")
  currentELO          Int          @default(1500) // Starting ELO rating for team
  Player              Player[] // Updated to reflect the new relationship
  TeamELOLog          TeamELOLog[]
}

model TeamMatch {
  id           Int      @id @default(autoincrement())
  date         DateTime @default(now())
  winnerTeamId Int
  loserTeamId  Int
  winnerELO    Int // ELO of winning team at time of match
  loserELO     Int // ELO of losing team at time of match
  winnerTeam   Team     @relation("TeamMatchWinner", fields: [winnerTeamId], references: [id])
  loserTeam    Team     @relation("TeamMatchLoser", fields: [loserTeamId], references: [id])

  @@index([winnerTeamId, loserTeamId])
}

// Reflects the creation of the TeamMembers table
model TeamMembers {
  A Int @id
  B Int

  @@unique([A, B])
  @@index([B])
}
